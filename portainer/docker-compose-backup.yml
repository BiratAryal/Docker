version: '3.7'

# *******************************************************************************************************
#                                  Network Defination
# *******************************************************************************************************

networks: #create custom network as per requirement
       test: #name of network
              driver: bridge
              ipam:
                     driver: default
                     config:
                     - subnet: 172.168.10.0/24
                       gateway: 172.168.10.1
       # monitoring:
       #        driver: bridge

# *******************************************************************************************************
#                                  Volume defination
# *******************************************************************************************************

volumes:
       jenkins_home:
       nginx_home:
       portainer_data:
       # prometheus_data: {}

# *******************************************************************************************************
#                                  Main Services Defination Starts
# *******************************************************************************************************

services: #define services or container that you want to build.
       portainer: #name of service that you want to install 
              image: portainer/portainer:latest #pull image from docker hub of latest version
              container_name: portainer #Define name of container
              volumes:
                     - /var/run/docker.sock:/var/run/docker.sock
                     - portainer_data:/data
                     # - /home/turboscript/Containers/Primary/Portainer/portainer_data:/data
              networks: #define network which was created at top
                     test: #name of network
                        ipv4_address: 172.168.10.254
              ports:
                     - 8000:8000
                     - 9000:9000
              restart: always #if host os is restarted then container also restarts itself.
# =======================================================================================================
#                                  Nginx Section
# =======================================================================================================

       nginx:
              build: /home/turboscript/Containers/Primary/Nginx
              # image: turboscript/nginx:04 #docker file present in this directory and builds from there.
              container_name: nginx #defines name of container
              volumes: #using bind-mount all files in directroy nginx is mounted to html
                     - /home/turboscript/hgfs/Primary/Nginx/html:/etc/nginx/html:rw
                     - nginx_home:/etc/nginx/:rw
                     # - /home/turboscript/shared/Docker/vid-tuts/nginx:/etc/nginx/html
              ports:
                     - 9999:80 #host port is 9999 and port of container is 80
              networks:
                     test:
                        ipv4_address: 172.168.10.2
       nginx2:
              build: /home/turboscript/Containers/Primary/Nginx
              # image: turboscript/nginx:04 #docker file present in this directory and builds from there.
              container_name: nginx2 #defines name of container
              volumes: #using bind-mount all files in directroy nginx is mounted to html
                     - /home/turboscript/hgfs/Primary/Nginx/html:/etc/nginx/html:rw
                     - nginx_home:/etc/nginx/:rw
                     # - /home/turboscript/shared/Docker/vid-tuts/nginx:/etc/nginx/html
              ports:
                     - 9998:80 #host port is 9999 and port of container is 80
              networks:
                     test:
                        ipv4_address: 172.168.10.3
# =====================================================================================================
#                                  Wildfly Section
# =====================================================================================================      
       # wildfly:
       #        image: jboss/wildfly
       #        container_name: wildfly_pri
       #        volumes:
       #               - /var/run/docker.sock:/var/run/docker.sock
       #               - /home/turboscript/shared/Docker/vid-tuts/portainer/wildfly:/home
       #        command: bash wildfly_install_final.sh
       #        ports:
       #               - 9998:8080
       #               - 9990:9990
       #        environment:
       #               - WILDFLY_PASSWORD=password
       #        restart: unless-stopped   

# =======================================================================================================
#                                  Jenkins Section
# =======================================================================================================
       jenkins:
              build: /home/turboscript/Containers/Primary/Jenkins
              privileged: true
              user: root
              container_name: jenkins
              volumes:
                     - jenkins_home:/var/jenkins_home
                     - /var/run/docker.sock:/var/run/docker.sock
                     - /usr/local/bin/docker:/usr/local/bin/docker
              ports:
                     - 9997:8080
                     - 50000:50000
              networks:
                     test:
                            ipv4_address: 172.168.10.4

# =======================================================================================================
#                                  Rancher (tested once)
# =======================================================================================================
#        rancher:
#               image: rancher/rancher
#               privileged: true
#               container_name: rancher
#               volumes:
#                      - /home/turboscript/Containers/rancher:/var/lib/rancher
#               ports:
#                      - 9996:80
#                      - 8880:443
#               restart: unless-stopped

# =======================================================================================================
#                                Prometheus Monitoring (test-phase)
# =======================================================================================================
       # node-exporter:
       #        image: prom/node-exporter:latest
       #        container_name: node-exporter
       #        restart: unless-stopped
       #        volumes:
       #               - /proc:/host/proc:ro
       #               - /sys:/host/sys:ro
       #               - /:/rootfs:ro
       #        command:
       #               - '--path.procfs=/host/proc'
       #               - '--path.rootfs=/rootfs'
       #               - '--path.sysfs=/host/sys'
       #               - '--collector.filesystem.mount-points-exclude=^/(sys|proc|dev|host|etc)($$|/)'
       #        expose:
       #               - 9100
       #        networks:
       #               - monitoring
       # prometheus:
       #        image: prom/prometheus:latest
       #        container_name: prometheus
       #        restart: unless-stopped
       #        volumes:
       #               - ./prometheus.yml:/etc/prometheus/prometheus.yml
       #               - prometheus_data:/prometheus
       #        command:
       #               - '--config.file=/etc/prometheus/prometheus.yml'
       #               - '--storage.tsdb.path=/prometheus'
       #               - '--web.console.libraries=/etc/prometheus/console_libraries'
       #               - '--web.console.templates=/etc/prometheus/consoles'
       #               - '--web.enable-lifecycle'
       #        expose:
       #               - 9090
       #        networks:
       #               - monitoring
       #

       # docker-registry:
       #        image: registry:2.8.1
       #        container_name: docker-registry
       #        ports:
       #              - 6000:5000
       #        restart: always
       #        volumes:
       #              - ./volume:/var/lib/registry
       # docker-registry-ui:
       #        image: konradkleine/docker-registry-frontend:v2
       #        container_name: docker-registry-ui
       #        ports:
       #              - 8080:80
       #        environment:
       #               ENV_DOCKER_REGISTRY_HOST: docker-registry
       #               ENV_DOCKER_REGISTRY_PORT: 5000
